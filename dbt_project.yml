# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: "dbt_training_project"
version: "1.0.0"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: "default"

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target" # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run
# dbt run or dbt build, all of your models will be built as a view in your data platform.
# The configuration below will override this setting for models in the example folder to
# instead be materialized as tables. Any models you add to the root of the models folder will
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  dbt_training_project:
    # Applies to all files under models/example/
    example:
      +materialized: table
seeds:
  dbt_training_project:
    +quote_columns: true
    # +schema: staging1 # np. staging/new_customers
    customers:
      +alias: "customers_seed" # alias tabeli w bazie (zamiast `customers`)
      +enabled: true
      +column_types:
        C_CUSTKEY: integer
        C_NAME: varchar
        C_ADDRESS: varchar
        C_NATIONKEY: integer
        C_PHONE: varchar
        C_ACCTBAL: numeric(12,2)
        C_MKTSEGMENT: varchar
        C_COMMENT: varchar
